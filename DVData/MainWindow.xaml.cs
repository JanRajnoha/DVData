using System.Text.RegularExpressions;
using Hardcodet.Wpf.TaskbarNotification;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlServerCe;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using System.Reflection;
using System.IO;
using System.Threading;
using System.Net.Mail;
//using System.Windows.Forms;

namespace DVData
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window, INotifyPropertyChanged
    {
        SearchClass SClass = new SearchClass();
        public SqlCeConnection pripojeni = new SqlCeConnection(@"Data Source=|DataDirectory|\Films.sdf");
        System.Drawing.Rectangle resolution = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
        public bool IsUpdate, Running, stejny = false;
        int ShowResUpdDB = 0;
            
        public MainWindow()
        {
            InitializeComponent();
            pripojeni.Open();
            Filmy.ItemsSource = SClass.FindInData(new TextBox(), pripojeni, new CheckBox(), new CheckBox(), new ComboBox()).Items;
            stav_prog();
            SilentUpdate();
            if (File.Exists(Environment.CurrentDirectory + "\\bat.bat"))
                File.Delete(Environment.CurrentDirectory + "\\bat.bat");
        }
        
        private double m_MyWindowHeight = 0;
        public double MyWindowHeight
        {
            get
            {
                return m_MyWindowHeight;
            }
            set
            {
                m_MyWindowHeight = value;
                this.OnPropertyChanged("MyWindowHeight");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (this.PropertyChanged != null)
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void Filmy_AutoGeneratedColumns(object sender, EventArgs e)
        {
            try
            {
                Filmy.Columns[0].Visibility = Visibility.Hidden;
                Filmy.Columns[1].Width = 250;
                Filmy.Columns[2].Width = 150;
                Filmy.Columns[3].Width = 100;
                Filmy.Columns[4].Width = 65;
                Filmy.Columns[5].Width = 125;
                Filmy.Columns[6].Width = 150;
                Filmy.Columns[7].Width = 75;
                Filmy.Columns[8].Width = 75;
                Filmy.Columns[9].Width = 75;
                WinSize();
            }
            catch { }
            this.DataContext = this;
            stav_prog();
        }

        private void WinSize()
        {
            if (Filmy.Items.Count > 11)
            {
                int ysize = 353 + (Filmy.Items.Count - 10) * 22;
                if (ysize > resolution.Height - 20)
                    MyWindowHeight = resolution.Height - 20;
                else
                    MyWindowHeight = ysize;
            }
            else
            {
                MyWindowHeight = 375;
            }
            this.InvalidateVisual();
            prime.InvalidateVisual();
        }

        private void odkazNaGoid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            System.Diagnostics.Process.Start("http://goid-cz.webnode.cz/");
            stav_prog("Program otevřel odkaz");
        }

        private void about_MouseDown(object sender, MouseButtonEventArgs e)
        {
            /*AboutBox1 ab = new AboutBox1();
            ab.ShowDialog();*/
        }

        private void upgrade_send_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add("frantanov8k@gmail.com");
                message.Subject = "Zlepšení programu DVData";
                message.From = new System.Net.Mail.MailAddress("neznamej@je.tu");
                message.Body = "E_mail: " + Upgrade_Mail.Text +
                    "\n\nNávrh na zlepšení programu: " + new TextRange(Upgrade_Message.Document.ContentStart, Upgrade_Message.Document.ContentEnd).Text;


                System.Net.Mail.SmtpClient smtp = new System.Net.Mail.SmtpClient("smtp.gmail.com", 587);
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtp.EnableSsl = true;
                smtp.UseDefaultCredentials = false;
                smtp.Timeout = 10000;
                smtp.Credentials = new System.Net.NetworkCredential("frantanov8k@gmail.com", "asdfghjkloiuytrewq");
                smtp.Send(message);

                MessageBox.Show("Zpráva odeslána. \nDěkujeme za Váš názor", "Děkujeme", MessageBoxButton.OK, MessageBoxImage.Information);
                stav_prog("Děkujeme za vaše nápady");
                Upgrade_Mail.Text = "";
                message.Dispose();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString() + "\n\nAkci zopakujte za pár minut.", "Chyba", MessageBoxButton.OK, MessageBoxImage.Error);
                stav_prog("Akce se nezdařila");
            }
        }

        private void error_send_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                System.Net.Mail.MailMessage message = new System.Net.Mail.MailMessage();
                message.To.Add("frantanov8k@gmail.com");
                message.Subject = "Chyba v programu DVData";
                message.From = new System.Net.Mail.MailAddress("neznamej@je.tu");
                message.Body = "E_mail: " + Error_Mail.Text +
                    "\n\nPopis chyby programu: " + new TextRange(Error_Message.Document.ContentStart, Error_Message.Document.ContentEnd).Text;


                System.Net.Mail.SmtpClient smtp = new System.Net.Mail.SmtpClient("smtp.gmail.com", 587);
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtp.EnableSsl = true;
                smtp.UseDefaultCredentials = false;
                smtp.Timeout = 10000;
                smtp.Credentials = new System.Net.NetworkCredential("frantanov8k@gmail.com", "asdfghjkloiuytrewq");
                smtp.Send(message);

                MessageBox.Show("Zpráva odeslána. \nDěkujeme za Váš názor", "Děkujeme", MessageBoxButton.OK, MessageBoxImage.Information);
                stav_prog("Děkujeme za oznámení\nChybu odstraníme");
                Error_Mail.Text = "";
                message.Dispose();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString() + "\n\nAkci zopakujte za pár minut.", "Chyba", MessageBoxButton.OK, MessageBoxImage.Error);
                stav_prog("Akce se nezdařila");
            }
        }

        private void InfoPanel_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var sb = this.FindResource("ObjeveniNapovedy") as System.Windows.Media.Animation.Storyboard;
            System.Windows.Media.Animation.Storyboard.SetTarget(sb, CloseHint);
            sb.Begin();
        }

        private void HideInfoPanel(object sender, MouseButtonEventArgs e)
        {
            InfoPanel.Visibility = Visibility.Hidden;
        }

        private void Rate_click(object sender, RoutedEventArgs e)
        {
            Feedback rate_this = new Feedback();
            stav_prog("Akce: Hodnocení programu");
            if ((bool)rate_this.ShowDialog())
                stav_prog("Spuštěn; Děkujeme za Vaše hodnocení.");
            else
                stav_prog();
        }

        public void AddEvent(bool Taskbar = false)
        {
            bool MoreFilms, SameFilms = false;
            MoreFilms = SameFilms;
            string film = "";
            stav_prog("Akce: Přidat záznam");
            do
            {
                Add pridej = new Add(Filmy);
                if (MoreFilms)
                {
                    pridej.name.Text = film;
                    pridej.more.IsChecked = MoreFilms;
                }
                if (Taskbar)
                {
                    pridej.ShowInTaskbar = true;
                }
                ulong id = IntelID(Filmy.Items);
                do
                {
                    if ((bool)pridej.ShowDialog())
                    {
                        MoreFilms = (bool)pridej.more.IsChecked;

                        stejny = pridej.stejny;
                        if (!pridej.Refresh.IsVisible)
                        {
                            stejny = false;
                            for (int i = 0; i < Filmy.Items.Count; i++)
                            {
                                DataRowView data = (DataRowView)Filmy.Items[i];
                                string year = data.Row.ItemArray[4].ToString();
                                if ((data.Row.ItemArray[1].ToString() == pridej.name.Text.ToString())
                                    && (year == pridej.rok.Text.ToString()))
                                {
                                    stejny = true;
                                    break;
                                }
                            }
                        }

                        bool okay = true;

                        if (stejny)
                        {
                            if (MessageBox.Show("Varování\n\nVáš film má shodný název jako jeden z filmů v databázi.\n\n" +
                                "Přidáním filmu můžete duplikovat záznamy a tím zpomalovat program.\n\nPřejete si i přesto film přidat do databáze?", "Varování: Shodné názvy filmů", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.OK)
                            {
                                okay = true;
                            }
                            else
                            {
                                okay = false;
                            }
                        }

                        if (okay)
                        {
                            SqlCeCommand Query = new SqlCeCommand("INSERT INTO Filmy " +
                                     "([ID],[Film],[typ],[Země],[Rok],[délka],[Adresa - CSFD],[Hodnocení - CSFD],[Viděl],[DVD]) " +
                                     "VALUES (@idcko,@Filmname,@typtyp,@zem,@year,@length,@adresa,@hodnoceni,@vid,@cd)", pripojeni);

                            Query.Parameters.AddWithValue("@idcko", id);
                            Query.Parameters.AddWithValue("@Filmname", pridej.novy[0]);
                            Query.Parameters.AddWithValue("@typtyp", pridej.novy[1]);
                            Query.Parameters.AddWithValue("@zem", pridej.novy[2]);
                            Query.Parameters.AddWithValue("@year", pridej.novy[3]);
                            Query.Parameters.AddWithValue("@length", Regex.Split(pridej.novy[4], " min")[0] + " min");
                            if (pridej.novy[5].Contains("\""))
                            {
                                int i = pridej.novy[5].IndexOf('\"');
                                pridej.novy[5] = pridej.novy[5].Substring(0, i);
                            }
                            Query.Parameters.AddWithValue("@adresa", pridej.novy[5]);
                            Query.Parameters.AddWithValue("@hodnoceni", pridej.novy[6]);
                            Query.Parameters.AddWithValue("@vid", pridej.novy[7]);
                            Query.Parameters.AddWithValue("@cd", pridej.novy[8]);
                            try
                            {
                                int affected = Query.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(ex.Message, Name, MessageBoxButton.OK, MessageBoxImage.Error);
                            }
                            stav_prog("Záznam přidán do databáze\nFilm: " + pridej.novy[0]);
                            SameFilms = false;
                        }
                        else
                        {
                            SameFilms = true;
                            pridej = new Add(pridej, Filmy);
                        }
                    }
                    else
                    {
                        if (!SameFilms)
                            MoreFilms = false;
                        SameFilms = false;                            
                        stav_prog("Spuštěn; Akce zrušena");
                    }
                }
                while (SameFilms);
                film = pridej.name.Text;
                Filmy.ItemsSource =
                    SClass.FindInData(new TextBox(), pripojeni, new CheckBox(), new CheckBox(), new ComboBox()).Items;
            }
            while (MoreFilms);
            WinSize();
        }

        public ulong IntelID(ItemCollection Items)
        {
            if (Items.Count == 0)
                return 1;
            else
            {
                ulong LastID = 0;
                ulong[] IDs = new ulong[Items.Count];
                for (int i = 0; i < Items.Count; i++)
                {
                    DataRowView data = (DataRowView)Items[i];
                    ulong.TryParse(data.Row.ItemArray[0].ToString(),out IDs[i]);
                }
                for (int i = 1; i <= IDs.Length; i++)
                {
                    if (!IDs.Contains((ulong)i))
                        return (ulong)(i);
                    else
                        LastID = (ulong)(i + 1);
                }
                return LastID;
            }
        }

        private void Add_Click(object sender, RoutedEventArgs e)
        {
            int Count = Filmy.Items.Count;
            AddEvent();
            switch (Filmy.Items.Count - Count)
            {
                case 1:
                    MessageBox.Show("Záznam přidán do databáze", Name, MessageBoxButton.OK, MessageBoxImage.Information);
                    break;

                case 0:
                    break;

                default:
                    MessageBox.Show("Všechny Vaše filmy byly přidány do databáze", Name, MessageBoxButton.OK, MessageBoxImage.Information);
                    break;
            }
        }

        private void Edit_Click(object sender, RoutedEventArgs e)
        {
            if (Filmy.SelectedItem != null)
            {
                DataRowView data = (DataRowView)Filmy.Items[Filmy.SelectedIndex];
                Add pridej = new Add("Editovat záznam", data, Filmy);
                stav_prog("Akce: Editovat záznam");
                if ((bool)pridej.ShowDialog())
                {
                    SqlCeCommand Query = new SqlCeCommand("UPDATE Filmy Set Film = '" + pridej.novy[0]  +
                        "', typ = '" + pridej.novy[1] +
                        "', [Země] = '" + pridej.novy[2] +
                        "', Rok = '" + pridej.novy[3] +
                        "', [délka] = '" + pridej.novy[4] + " min" +
                        "', [Adresa - CSFD] = '" + pridej.novy[5] +
                        "', [Hodnocení - CSFD] = '" + pridej.novy[6] +
                        "', [Viděl] = '" + pridej.novy[7] +
                        "', DVD = '" + pridej.novy[8] + "' Where ID = " + data.Row.ItemArray[0].ToString(), pripojeni);
                    try
                    {
                        int affected = Query.ExecuteNonQuery();
                        if (affected > 0)
                            MessageBox.Show("Záznam byl upraven a uložen do databáze", Name, MessageBoxButton.OK, MessageBoxImage.Information);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message, Name, MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                    stav_prog("Záznam byl upraven a uložen do databáze");
                }
                else
                    stav_prog("Spuštěn; Akce zrušena");
                Filmy.ItemsSource = SClass.FindInData(new TextBox(), pripojeni, new CheckBox(), new CheckBox(), new ComboBox()).Items;
            }
        }

        private void Delete_Click(object sender, RoutedEventArgs e)
        {
            int Items = Filmy.Items.Count;
            if (Filmy.SelectedItem != null)
            {
                foreach (var Item in Filmy.SelectedItems)
                {
                    DataRowView dataRow = (DataRowView)Item;
                    if (MessageBox.Show("Přejete si smazat vybraný záznam:\n" +
                   "Název filmu: " + dataRow.Row.ItemArray[1].ToString(), "Smazat záznam", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                    {
                        SqlCeCommand Query = new SqlCeCommand("Delete From filmy " +
                                 "Where ID='" + dataRow.Row.ItemArray[0].ToString() + "'", pripojeni);
                        try
                        {
                            int affected = Query.ExecuteNonQuery();                            
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message, Name, MessageBoxButton.OK, MessageBoxImage.Error);
                        }
                    }
                }
            }
            Filmy.ItemsSource = SClass.FindInData(new TextBox(), pripojeni, new CheckBox(), new CheckBox(), new ComboBox()).Items;
            switch (Items - Filmy.Items.Count)
            {
                case 0:
                    break;

                case 1:
                    MessageBox.Show("Záznam odebrán z databáze", Name, MessageBoxButton.OK, MessageBoxImage.Information);
                    stav_prog("Záznam odebrán z databáze");      
                    break;

                default:
                    MessageBox.Show("Záznamy odebrány z databáze", Name, MessageBoxButton.OK, MessageBoxImage.Information);
                    stav_prog("Záznamy odebrány z databáze");
                    break;
            }      
            WinSize();
        }

        public void stav_prog(string stav = "Spuštěn", string AddOn = "")
        {
            if (ShowResUpdDB == 5)
            {
                VisibilityState(false);
                ShowResUpdDB = 0;
            }
            else
            {
                ShowResUpdDB++;
            }
            var Texts = Regex.Split(stav, "\n");
            status.Content = Texts[0];
            tbi.ToolTipText = stav;
            ToolInfo.Text = stav;
            Popisek.Text = stav + "\nPočet záznamů: " + Filmy.Items.Count + AddOn;
        }

        public void balonek (string Title, string Text, string Action)
        {
            switch (Action)
            {
                case "Normal":
                    tbi.TrayBalloonTipClicked -= Tbi_Clicked_Update;
                    tbi.TrayBalloonTipClicked += Tbi_Clicked_Normal;
                    break;

                case "Update":
                    tbi.TrayBalloonTipClicked -= Tbi_Clicked_Normal;
                    tbi.TrayBalloonTipClicked += Tbi_Clicked_Update;
                    break;
            }
            tbi.ShowBalloonTip(Title, Text, BalloonIcon.Info);
        }

        private void Tbi_Clicked_Update(object sender, RoutedEventArgs e)
        {
            Update_click(sender, e);
        }

        private void Tbi_Clicked_Normal(object sender, RoutedEventArgs e)
        {
            this.Activate();
        }

        private void Refresh_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (SClass.CheckNet())
                {
                    stav_prog("Obnovuji všechna hodnocení");
                    int i = 0;
                    int itemy = 0;
                    VisibilityState();
                    CurrentState.Content = "Stav: Obnovení všech hodnocení";
                    Progress.Maximum = Filmy.Items.Count;
                    Progress.Value = 0;
                    foreach (var item in Filmy.Items)
                    {
                        DataRowView data = (DataRowView) item;
                        if (data.Row.ItemArray[6].ToString().Length != 0)
                        {
                            string LastRate = data.Row.ItemArray[7].ToString();
                            string Rating = "";
                            var webget = new HtmlAgilityPack.HtmlWeb();
                            var doc = webget.Load(data.Row.ItemArray[6].ToString());
                            try
                            {
                                var FindH2Tag =
                                    doc.DocumentNode.Descendants("h2")
                                        .Where(
                                            d =>
                                                d.Attributes.Contains("class") &&
                                                d.Attributes["class"].Value.Contains("average"));
                                var hodnoceni = FindH2Tag.Select(c => c.InnerHtml).Single();
                                Rating = hodnoceni;
                            }
                            catch
                            {
                                Rating = "";
                            }
                            if (LastRate != Rating)
                            {
                                itemy++;
                                SqlCeCommand Query =
                                    new SqlCeCommand(
                                        "UPDATE Filmy Set [Hodnocení - CSFD] = '" + Rating + "' WHERE ID = " +
                                        data.Row.ItemArray[0].ToString(), pripojeni);
                                try
                                {
                                    int affected = Query.ExecuteNonQuery();
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show(
                                        "V programu nastala chyba. Informace o dané položce \nPoložka číslo: " + i +
                                        "\n" +
                                        "Název filmu: " + data.Row.ItemArray[1].ToString() + "\n" +
                                        ex.Message, Name, MessageBoxButton.OK, MessageBoxImage.Error);
                                }
                            }
                            i++;
                            Addment.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);
                            CurrentState.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);
                            Progress.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);
                        }
                        Progress.Value = Progress.Value + 1;
                    }
                    Addment.Content = "Stav: Bylo upraveno " + itemy + " položek";
                    stav_prog(AddOn: "\nBylo upraveno " + itemy + " položek");
                }
                else
                {
                    VisibilityState();
                    stav_prog("Váš počítač není připojen k internetu");
                }
            }
            catch
            {
                stav_prog("V programu nastala chyba");
            }
        }

        private void VisibilityState(bool Visible = true)
        {
            if (Visible)
            {
                CurrentState.Visibility = Visibility.Visible;
                Progress.Visibility = Visibility.Visible;
                Addment.Visibility = Visibility.Visible;
            }
            else
            {
                CurrentState.Visibility = Visibility.Hidden;
                Progress.Visibility = Visibility.Hidden;
                Addment.Visibility = Visibility.Hidden;
            }
            Addment.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);
            CurrentState.Dispatcher.Invoke(DispatcherPriority.Render, EmptyDelegate);
        }

        private static Action EmptyDelegate = delegate () { };

        private void Find_CSFD_Click(object sender, RoutedEventArgs e)
        {
            bool SearchCSFDReuslt = false;
            bool Continue = false;
            bool MoreSearches = false;
            do
            {
                Search SearchCSFD = new Search();
                SearchCSFD.MoreSearches.IsChecked = MoreSearches;
                SearchCSFDReuslt = (bool)SearchCSFD.ShowDialog();
                MoreSearches = (bool)SearchCSFD.MoreSearches.IsChecked;
                if (SearchCSFDReuslt)
                {
                    stav_prog("Program vyhledává: " + SearchCSFD.Find_box.Text);
                    Result vysldek = SClass.FindFilm(SearchCSFD.Find_box.Text, true);

                    if (vysldek.Films.Items.Count == 0)
                        vysldek.Exp1.IsExpanded = false;
                    else
                        vysldek.Exp1.IsExpanded = true;

                    if (vysldek.Actors.Items.Count == 0)
                        vysldek.Exp2.IsExpanded = false;
                    else
                        vysldek.Exp2.IsExpanded = true;

                    if ((bool)vysldek.ShowDialog())
                    {
                        if (vysldek.DB == "Films")
                        {
                            FilmCard FCard = new FilmCard();
                            string name = "";
                            string[] data = FCard.LoadProperties(ref name, vysldek, SClass.HDoc);
                            data[5] += " min";
                            data[8] = "Ne";
                            data[9] = "Ne";
                            Card_film PropFilm = FCard.LoadCard(data);
                            PropFilm.Cancel.Visibility = Visibility.Visible;
                            PropFilm.seen.IsEnabled = true;
                            PropFilm.DVD.IsEnabled = true;
                            PropFilm.Client = this;
                            PropFilm.Accept.Content = "Přidat film do databáze";
                            PropFilm.ID = IntelID(Filmy.Items);
                            PropFilm.pripojeni = pripojeni;
                            PropFilm.link = data[6];
                            PropFilm.Show();
                        }
                        else
                        {
                            ArtCard ACard = new ArtCard();
                            var data = vysldek.ArtData;
                            Card_art PropArt = ACard.LoadCard(data, vysldek, SClass.HDoc);
                            PropArt.Client = this;
                            PropArt.Show();
                        }
                    }
                }
                else
                    stav_prog("Spuštěn; Akce zrušena");
                Continue = (MoreSearches == true) && (true == SearchCSFDReuslt);
            }
            while (Continue);
        }

        private void Find_Data_Click(object sender, RoutedEventArgs e)
        {
            stav_prog("Program přpiraven k vyhledávání");
            Find FindData = new Find();
            foreach (var col in Filmy.Columns)
            {
                if ((col.Header.ToString() != "ID") && (col.Header.ToString() != "Viděl") && (col.Header.ToString() != "DVD"))
                    FindData.Find_list.Items.Add(col.Header.ToString());
            }
            if ((bool) FindData.ShowDialog())
            {
                stav_prog("Program prohledává databázi");
                Filmy.ItemsSource = null;
                Filmy.ItemsSource = SClass.FindInData(FindData.Find_box, pripojeni, FindData.Seen, FindData.DVD, FindData.Find_list).Items;
                Reload.Visibility = Visibility.Visible;
                stav_prog("Hledaný výraz: " + FindData.Find_box.Text +
                    "\nKategorie: " + FindData.Find_list.SelectedValue);
            }
            else
                stav_prog("Spuštěn; Akce zrušena");
        }

        private void Client_Closed(object sender, EventArgs e)
        {
            tbi.Visibility = Visibility.Collapsed;
            if (IsUpdate)
            {
                System.Diagnostics.Process.Start(Environment.CurrentDirectory + "\\bat.bat");
            }
        }

        private void Properties(object sender, MouseButtonEventArgs e)
        {
            try
            {
                DataRowView dataRow = (DataRowView)Filmy.SelectedItem;
                int index = Filmy.CurrentCell.Column.DisplayIndex;
                if (index == 6)
                {
                    System.Diagnostics.Process.Start(dataRow.Row.ItemArray[index].ToString());
                    stav_prog("Program otevřel odkaz");
                }
                else
                {
                    stav_prog("Program vytváří kartu k filmu");
                    FilmCard FCard = new FilmCard();
                    Card_film PropFilm = FCard.LoadCard(dataRow);
                    PropFilm.Client = this;
                    PropFilm.Show();
                    stav_prog("Program zobrazuje podrobnosti k filmu: " + dataRow.Row.ItemArray[1].ToString());
                }
            }
            catch { }
        }

        private void Reload_Click(object sender, RoutedEventArgs e)
        {
            Filmy.ItemsSource = null;
            Filmy.Items.Clear();
            Filmy.ItemsSource = SClass.FindInData(new TextBox(), pripojeni, new CheckBox(), new CheckBox(), new ComboBox()).Items;
            Reload.Visibility = Visibility.Hidden;
            stav_prog();
        }

        private void pok(object sender, MouseButtonEventArgs e)
        {
            InfoPanel.Visibility = Visibility.Visible;
        }

        private void DVData_MI_Click(object sender, RoutedEventArgs e)
        {
            this.Activate();
        }

        private void Add_MI_Click(object sender, RoutedEventArgs e)
        {
            int Count = Filmy.Items.Count;
            AddEvent(true);
            switch (Filmy.Items.Count - Count)
            {
                case 1:
                    balonek("Film byl přidán do databáze", "Váš film byl přidán do databáze", "Normal");
                    break;

                case 0:
                    break;

                default:
                    balonek("Filmy byly přidány do databáze", "Všechny Vaše filmy byly přidány do databáze", "Normal");
                    break;
            }
        }

        private void Close_MI_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void Silent_MI_Click(object sender, RoutedEventArgs e)
        {
            if (this.IsVisible)
                this.Hide();
            else
                this.Visibility = Visibility.Visible;
        }

        private void Update_MI_Click(object sender, RoutedEventArgs e)
        {
            SilentUpdate();
        }

        private void Refresh_DG_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (SClass.CheckNet())
                {
                    stav_prog("Obnovuji hodnocení položky");
                    DataRowView data = (DataRowView)Filmy.Items[Filmy.SelectedIndex];
                    if (data.Row.ItemArray[6].ToString().Length != 0)
                    {
                        string LastRate = data.Row.ItemArray[7].ToString();
                        string Rating = "";
                        var webget = new HtmlAgilityPack.HtmlWeb();
                        var doc = webget.Load(data.Row.ItemArray[6].ToString());
                        try
                        {
                            var FindH2Tag =
                                doc.DocumentNode.Descendants("h2")
                                    .Where(
                                        d =>
                                            d.Attributes.Contains("class") &&
                                            d.Attributes["class"].Value.Contains("average"));
                            var hodnoceni = FindH2Tag.Select(c => c.InnerHtml).Single();
                            Rating = hodnoceni;
                        }
                        catch
                        {
                            Rating = "";
                        }
                        if (LastRate != Rating)
                        {
                            SqlCeCommand Query =
                                new SqlCeCommand(
                                    "UPDATE Filmy Set [Hodnocení - CSFD] = '" + Rating + "' WHERE ID = " +
                                    data.Row.ItemArray[0].ToString(), pripojeni);
                            try
                            {
                                int affected = Query.ExecuteNonQuery();
                                stav_prog("Hodnocení bylo obnoveno");
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show(
                                    "V programu nastala chyba. Informace o dané položce \nPoložka číslo: " + Filmy.SelectedIndex.ToString() + 
                                    "\n" +
                                    "Název filmu: " + data.Row.ItemArray[1].ToString() + "\n" +
                                    ex.Message, Name, MessageBoxButton.OK, MessageBoxImage.Error);
                                stav_prog("Nebylo možné obnovit hodnocení");
                            }
                        }
                        else
                            stav_prog("Hodnocení je aktuální; Spuštěn");
                    }
                }
                else
                {
                    VisibilityState();
                    stav_prog("Váš počítač není připojen k internetu");
                }
            }
            catch
            {
                stav_prog("V programu nastala chyba");
            }
        }

        private void SilentUpdate()
        {
            stav_prog("Vyhledávám nové aktualizace");
            Updater UPD = new Updater(Assembly.GetEntryAssembly().GetName().Name, this, true);
            Running = true;
            UPD.CheckUpdate();
            if (UPD.Update)
            {
                balonek("Aktualizace", "Program našel novější verzi programu", "Update");
                stav_prog("Byla nalezena aktualizace");
            }
            else
                stav_prog("Váš program je aktuální");
        }

        private void Update_click(object sender, RoutedEventArgs e)
        {
            if (!Running)
            {
                Updater UPD = new Updater(Assembly.GetEntryAssembly().GetName().Name, this, false);
                UPD.Show();
                UPD.Accept.Visibility = Visibility.Collapsed;
                Running = true;
                UPD.CheckUpdate();
                if (UPD.Update)
                    stav_prog("Byla nalezena aktualizace");
                else
                    stav_prog("Váš program je aktuální");
            }
        }
    }
}